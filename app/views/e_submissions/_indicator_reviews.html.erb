          <span>

<%
#            defined?(revision) or revision = submission.lsr
    (defined?(revision) and revs=[revision]) or revs = submission.revisions_submitted.order(:revision_n)

    d_icon_map = {
        d1_draft: 'square-o',
        reject_without_consideration: 'times',
        take_for_consideration: 'plus',
        d2_draft: 'pencil-square',
        accept: 'square',
        reject: 'square',
        revise: 'square',
    }
    r_icon_map = {
        pending: 'question-circle-o',
        cancelled: 'times-circle',
        declined: 'minus-circle',
        noreview: 'question-circle-o',
        notready: 'circle-o',
        accept: 'circle',
        reject: 'circle',
        revise: 'circle',
    }

    steps = []
    revs.each do |rr|
        decision_1 = rr.decision_1
        if decision_1
            status_1 = decision_1.submitted? ? decision_1.decision : 'd1_draft'
            steps << [{
                type: 'decision',
                status: status_1,
                icon: d_icon_map[status_1.to_sym]
            }]
        end

        reviews_by_reviewer_map = rr.reviews.inject({}) do |a, r|
            a[r.user_id] = r
            a
        end
        invited = submission.reviewer_invitations.where.not(aasm_state: :inactive)
        reviewers_status = invited.map do |i|
            status = 'pending'
            status = 'cancelled' if i.cancelled?
            status = 'declined' if i.declined?
            if i.accepted?
                status = 'noreview'
                review = reviews_by_reviewer_map[i.user_id]
                if review
                    status = if review.submitted?
                        review.decision
                    else
                        'notready'
                    end
                end
            end
            status
        end
        if reviewers_status.count > 0
            steps << reviewers_status.map do |rs|
                {
                    type: 'review',
                    status: rs,
                    icon: r_icon_map[rs.to_sym]
                }
            end
        end

        decision_2 = rr.decision_2
        if decision_2
            status_2 = decision_2.submitted? ? decision_2.decision : 'd2_draft'
            steps << [{
                type: 'decision',
                status: status_2,
                icon: d_icon_map[status_2.to_sym]
            }]
        end

    end

%>


<%
    arrow = false
    steps.each do |s|
%>
        <% if arrow %>
            <%= fa_icon 'chevron-right' %>
        <% end %>

        <% s.each do |ss| %>
            <%= fa_icon ss[:icon], class: "#{ss[:type]}-status-#{ss[:status]}", title: ss[:status] %>
        <% end %>
<%
        arrow = true
    end
%>

          </span>
